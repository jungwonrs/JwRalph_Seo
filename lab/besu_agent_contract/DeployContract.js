var Web3 = require('web3');
var ethTx = require('ethereumjs-tx');

var web3 = new Web3(new Web3.providers.HttpProvider('http://3.35.53.4:8545'));

    const addressFrom = 'fe3b557e8fb62b89f4916b721be55ceb828dbd73';
    const privKey = Buffer.from('8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63', 'hex');
    const contractData = "0x608060405234801561001057600080fd5b506104f9806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632de04e031461005157806380430b0814610133575b600080fd5b34801561005d57600080fd5b506100b8600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506101e2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f85780820151818401526020810190506100dd565b50505050905090810190601f1680156101255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013f57600080fd5b506101e0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506102f2565b005b60606000826040518082805190602001908083835b60208310151561021c57805182526020820191506020810190506020830392506101f7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102e65780601f106102bb576101008083540402835291602001916102e6565b820191906000526020600020905b8154815290600101906020018083116102c957829003601f168201915b50505050509050919050565b600080836040518082805190602001908083835b60208310151561032b5780518252602082019150602081019050602083039250610306565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209050600015158160010160009054906101000a900460ff1615151415156103ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f494420616c72656164792065786973740000000000000000000000000000000081525060200191505060405180910390fd5b81816000019080519060200190610405929190610428565b5060018160010160006101000a81548160ff021916908315150217905550505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061046957805160ff1916838001178555610497565b82800160010185558215610497579182015b8281111561049657825182559160200191906001019061047b565b5b5090506104a491906104a8565b5090565b6104ca91905b808211156104c65760008160009055506001016104ae565b5090565b905600a165627a7a723058207cfa5e3c8dcc8f65e13c48695ec00f7196c696a94c4e0ea36b3d468ca0a839f30029"

    web3.eth.getTransactionCount(addressFrom, "pending").then((txnCount) => {

        var txObject = {
            nonce: web3.utils.numberToHex(txnCount),
            gasPrice: web3.utils.numberToHex(1000),
            gasLimit: web3.utils.numberToHex(3000000),
            data: contractData
        };

        var tx = new ethTx(txObject);
        tx.sign(privKey);

        var serializedTx = tx.serialize();
        var rawTxHex = '0x' + serializedTx.toString('hex');

        web3.eth.sendSignedTransaction(rawTxHex).on('receipt', receipt => { console.log('Receipt: ', receipt);})
            .catch(error => { console.log('Error: ', error.message); });
        console.log("Contract transaction sent, waiting for receipt");
        res.status(200).json(
            {
                "status": "Contract transaction sent!",
                "transaction_Hash": rawTxHex
            }
        );
    })
        .catch(error => { console.log('Error: ', error.message); });
